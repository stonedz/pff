<?php

/**
 * Test class for App.
 *
 * Generated by PHPUnit on 2012-03-04 at 11:37:03.
 */
class AppTest extends PHPUnit_Framework_TestCase {

    /**
     * @var \pff\App
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $conf          = new \pff\Config();
        $moduleManager = $this->getMock('\\pff\\ModuleManager', array(), array($conf));
        $hookManager   = $this->getMock('\\pff\\HookManager', array(), array($conf));
        $this->object  = new \pff\App('one/two/three', $conf, $moduleManager, $hookManager);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown() {
    }

    public function testGetUrl() {
        $this->assertEquals('one/two/three', $this->object->getUrl());
    }

    public function testSetErrorReportingProd() {
        $this->object->getConfig()->setConfig('development_environment', false);
        $this->object->setErrorReporting();
        $this->assertEquals('Off', ini_get('display_errors'));
    }

    /**
     * @covers \pff\App::setErrorReporting
     * @return void
     */
    public function testSetErrorReportingDev() {
        $this->object->getConfig()->setConfig('development_environment', true);
        $this->object->setErrorReporting();
        $this->assertEquals('On', ini_get('display_errors'));
    }

    /**
     * Tests the setting of a user defined route.
     *
     * @covers \pff\App
     * @return void
     */
    public function testSetRoutes() {
        $this->assertEmpty($this->object->getRoutes());
        $this->object->addRoute('test', 'test');
        $tmp = $this->object->getRoutes();
        $this->assertArrayHasKey('test', $tmp);
        $this->assertEquals('test', $tmp['test']);
    }

    /**
     * @covers \pff\App
     */
    public function testApplyRouting() {
        $this->object->addRoute('test', 'test');
        $tmpReq = 'test';
        $this->assertTrue($this->object->applyRouting($tmpReq));
        $this->assertEquals($tmpReq, 'Test_Controller');
    }

    /**
     * Fails the addition to a static route that points to a non existant file
     *
     * @covers \pff\App
     * @covers \pff\RoutingException
     * @return void
     */
    public function testSetRoutesFails() {
        $this->setExpectedException('\\pff\\RoutingException');
        $this->object->addRoute('test', 'testNOTController');
    }

    /**
     * Tests the setting of a user defined route.
     *
     * @covers \pff\App::addStaticRoute
     * @covers \pff\App::getStaticRoutes
     * @return void
     */
    public function testSetStaticRoutes() {
        $this->assertEmpty($this->object->getStaticRoutes());
        $this->object->addStaticRoute('test', 'testPage.php');
        $tmp = $this->object->getStaticRoutes();
        $this->assertArrayHasKey('test', $tmp);
        $this->assertEquals('testPage.php', $tmp['test']);
    }

    /**
     * @covers \pff\App::applyStaticRouting
     */
    public function testApplyStaticRouting() {
        $this->object->addStaticRoute('test', 'testPage.php');
        $tmpReq = 'test';
        $this->assertTrue($this->object->applyStaticRouting($tmpReq));
        $this->assertEquals($tmpReq, 'app' . DS . 'pages' . DS . 'testPage.php');
    }

    /**
     * Fails the addition to a static route that points to a non existant file
     *
     * @return void
     */
    public function testSetStaticRoutesFails() {
        $this->setExpectedException('\\pff\\RoutingException');
        $this->object->addStaticRoute('test', 'testNOTPage.php');
    }

    public function testApplyStaticRoutesFailsWithInvalidRoute() {
        $tmp = 'NO_I_DO_NOT_EXIST';
        $this->assertFalse($this->object->applyStaticRouting($tmp));
    }

    public function testApplyRoutesFailsWithInvalidRoute() {
        $tmp = 'NO_I_DO_NOT_EXIST';
        $this->assertFalse($this->object->applyRouting($tmp));
    }

    public function testRunFailsWithInvalidController() {
        $this->setExpectedException('\\pff\\RoutingException');
        $this->object->run();
    }

}